pipeline {
  agent {
    label 'didit-jenkins-ecs-raio'
  }

  options {
    disableConcurrentBuilds()
  }

  environment {
    PCF_PROD_CREDENTIALS = credentials('jenkins-pcf-user')
    GITHUB_CREDENTIALS = credentials('53a1609a-3d99-4366-a6ca-21ec04653b07')
    GITHUB_REPO_NAME = 'DIDIT/global_form_review'

    STAGING_PCF_ORG = 'DIDIT Staging'
    STAGING_PCF_SPACE = 'global-form-review-staging'
  }

  stages {
    stage('Setup') {
      steps {
        script {
          SHOULD_DEPLOY_STAGING = (env.BRANCH_NAME == 'master')
        }
        updateGitHubCommitStatus('pending', 'Building...')

        sh('bash -c " source ~/.rvm/scripts/rvm && rvm use --install --create . && export > rvm.env"')
        sh('''
          { . rvm.env; } &> /dev/null
          gem list --silent -i bundler -v "${BUNDLER_VERSION}" ||
            gem install bundler -v "${BUNDLER_VERSION}" --no-document
          bundle install --jobs=4 --retry=4
        ''')

        nvm(nvmInstallURL: 'https://raw.git.uscis.dhs.gov/DIDIT/didit_nvm/master/install-v0.34.0.sh?token=AAACEFQRJL3FOR4E2WNFLC3A4425U',
            nvmIoJsOrgMirror: 'https://iojs.org/dist',
            nvmNodeJsOrgMirror: 'https://nodejs.org/dist',
            version: '16.14.0') {
          sh('yarn install')
            }
      }
    }

    stage('Test') {
      parallel {
        stage('Ruby') {
          steps {
            sh('''
              { . rvm.env; } &> /dev/null
              bundle exec rake db:create db:migrate db:test:prepare
            ''')

            sh('''
              { . rvm.env; } &> /dev/null
              RAILS_ENV=test bundle exec rake webpacker:compile
            ''')

            sh('''
              { . rvm.env; } &> /dev/null
              RAILS_ENV=test SIMPLECOV_FORMATTER=rcov bundle exec rspec spec
            ''')

            step([
                $class   : 'RcovPublisher',
                reportDir: 'coverage/rcov',
                targets  : [
                    [metric: 'TOTAL_COVERAGE', healthy: 90, unhealthy: 0, unstable: 90],
                    [metric: 'CODE_COVERAGE', healthy: 90, unhealthy: 90, unstable: 90]
                ]
            ])
          }
        }

        stage('JS') {
          steps {
            sh('''
              { . rvm.env; } &> /dev/null
              yarn test
            ''')

            sh('''
              { . rvm.env; } &> /dev/null
              yarn lint
            ''')

            sh('''
              { . rvm.env; } &> /dev/null
              yarn pretty
            ''')

            sh('''
              { . rvm.env; } &> /dev/null
              yarn tsc
            ''')
          }
        }

        stage('Rubocop') {
          steps {
            sh('''
              { . rvm.env; } &> /dev/null
              gem list --silent -i didit_rubocop_rails -v ${DIDIT_RUBOCOP_RAILS_VERSION} ||
                gem install didit_rubocop_rails -v ${DIDIT_RUBOCOP_RAILS_VERSION} --no-document
              rubo _${DIDIT_RUBOCOP_RAILS_VERSION}_

              if [ -f rubocop/total-violations-count.txt ]; then
                echo "SUCCESS: rubocop/total-violations-count.txt found. Evaluating linting metrics."
                RUBO_OFFENSES_THRESHOLD=0
                rubocop_violations_count=`cat rubocop/total-violations-count.txt`
                if [ "$rubocop_violations_count" -le "$RUBO_OFFENSES_THRESHOLD" ]; then
                  echo "SUCCESS: You have not exceeded the limit of 0 offenses from rubocop."
                else
                  echo -n "ERROR: Your total number of rubocop offenses exceeds the limit of 0 offenses. "
                  echo    "Please correct the issues ASAP.";
                  (exit 1);
                fi
              else
                echo -n "WARNING: rubocop/total-violations-count.txt does not exist, which means you probably did not "
                echo -n "run rubocop properly. If you would like to post rubocop reports on your PRs, please "
                echo    "configure this properly."
              fi
            ''')
          }
        }

        stage('ERB Lint') {
          steps {
            sh('''
              { . rvm.env; } &> /dev/null
              gem install erb_lint --no-document -v 0.0.35
              erblint --lint-all
            ''')
          }
        }

        stage('Bundler Audit') {
          steps {
            sh('''
              { . rvm.env; } &> /dev/null
              gem list --silent -i bundler-audit -v ${BUNDLER_AUDIT_VERSION} ||
                gem install bundler-audit -v ${BUNDLER_AUDIT_VERSION} --no-document
              bundle audit _${BUNDLER_AUDIT_VERSION}_ --update --ignore $(echo $BUNDLER_AUDIT_EXCLUDED_CVE_LIST)
            ''')
          }
        }

        stage('Brakeman') {
          steps {
            sh('''
              { . rvm.env; } &> /dev/null
                gem uninstall brakeman-pro
                gem install brakeman --no-document
                brakeman -o brakeman-output.tabs
            ''')

            publishBrakeman 'brakeman-output.tabs'
          }
        }
      }
    }

    stage('Precompile Assets') {
      when {
        expression {
          return SHOULD_DEPLOY_STAGING
        }
      }

      steps {
        sh('''
          { . rvm.env; } &> /dev/null
          RAILS_ENV=production bundle exec rake webpacker:compile assets:precompile
        ''')
      }
    }

    stage('Deploy Web') {
      when {
        expression {
          return SHOULD_DEPLOY_STAGING
        }
      }

      steps {
        sh('cf login -a https://api.system.pcf.uscis.dhs.gov -u "$PCF_PROD_CREDENTIALS_USR" \
          -p "$PCF_PROD_CREDENTIALS_PSW" -s "$STAGING_PCF_SPACE" -o "$STAGING_PCF_ORG"')
        sh('cf push -f manifest.staging.yml')
      }
    }
  }

  post {
    success {
      updateGitHubCommitStatus('success', 'Build passed!')
    }
    unstable {
      updateGitHubCommitStatus('failure', 'Build unstable.')
    }
    aborted {
      updateGitHubCommitStatus('failure', 'Build aborted.')
    }
    failure {
      updateGitHubCommitStatus('failure', 'Build failed.')
    }
    always {
      archiveArtifacts 'log/test.log'
    }
  }
}

void updateGitHubCommitStatus(String state, String description) {
  // NB: There are two different types of variables here, environment variables and groovy variables
  //  - env vars (GITHUB_CREDENTIALS, BUILD_URL, etc) are escaped to allow the shell to fill them in
  //  - groovy vars (state, description) are filled in by the pipeline (before shell executes)
  sh("""
    export GIT_COMMIT=`git rev-parse HEAD`
    curl --silent --show-error https://git.uscis.dhs.gov/api/v3/repos/\${GITHUB_REPO_NAME}/statuses/\${GIT_COMMIT} \
      --header "Authorization: token \${GITHUB_CREDENTIALS}" \
      --header "Content-Type: application/json" \
      --data '{"target_url": "'\${BUILD_URL}'", "context": "jenkins-ci", \
               "state": "${state}", "description": "${description}"}'
  """)
}



